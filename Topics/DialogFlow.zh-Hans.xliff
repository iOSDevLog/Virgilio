<?xml version="1.0" encoding="UTF-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file original="Topics/DialogFlow.md"
    source-language="en-US" target-language="zh-Hans" datatype="markdown">
    <header>
      <skl>
        <external-file href="Topics/DialogFlow.zh-Hans.skl"/>
      </skl>
    </header>
    <body>
      <trans-unit id="1">
        <source xml:lang="en-US">ChatBots with DialogFlow, Python, and Flask</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="2">
        <source xml:lang="en-US">We have 99.94847 percent probability of death, Luke</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="3">
        <source xml:lang="en-US">In simple terms, a <bpt id="1">[</bpt>Chatbot<ept id="1">]</ept><bpt id="2">(</bpt>https://medium.com/swlh/what-is-a-chatbot-and-how-to-use-it-for-your-business-976ec2e0a99f<ept id="2">)</ept> is a computer program that simulates human conversation (in the form of texts and audio) 
which we would perceive as being intelligent and useful.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="4">
        <source xml:lang="en-US">
Their most important application is personal or enterprise virtual assistants.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="5">
        <source xml:lang="en-US">Chatbots can <bpt id="1">_</bpt>dig through huge amounts of data<ept id="1">_</ept> to pick out
the best nugget for a customer, whether it is a troubleshooting solution or a recommendation for a
new product to try.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="6">
        <source xml:lang="en-US">Also, they offer an extremely <bpt id="1">_</bpt>intuitive interface<ept id="1">_</ept> between your business and your customers.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="7">
        <source xml:lang="en-US">Depending on the situation, a chatbot can learn from what a user
says to personalize the interaction and build off previous interaction, giving 
a <bpt id="1">[</bpt>satisfying and futuristic customer experience<ept id="1">]</ept><bpt id="2">(</bpt>https://mobilemonkey.com/chatbots/chatbot-examples<ept id="2">)</ept>.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="8">
        <source xml:lang="en-US">Why Dialogflow</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="9">
        <source xml:lang="en-US"><bpt id="1">[</bpt>DialogFlow<ept id="1">]</ept><bpt id="2">(</bpt>https://dialogflow.com/<ept id="2">)</ept> is the beginner-friendly chatbot platform from Google, and albeit there are several platforms out 
there (<bpt id="3">[</bpt>here<ept id="3">]</ept><bpt id="4">(</bpt>https://chatbotsmagazine.com/choosing-the-best-chatbot-platform-101-a-beginners-guide-e841b41192c7<ept id="4">)</ept> a cool guide on choosing the right 
platforms), DialogFlow has the best tradeoffs in particular for a beginner.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="10">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Here<ept id="1">]</ept><bpt id="2">(</bpt>https://chatbotsjournal.com/25-chatbot-platforms-a-comparative-table-aeefc932eaff<ept id="2">)</ept> you find 
another comparative table.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="11">
        <source xml:lang="en-US">I've chosen DialogFlow because:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="12">
        <source xml:lang="en-US">Incorporates Google's machine learning expertise and products such as Google Cloud Speech-to-Text.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="13">
        <source xml:lang="en-US">Is a Google service that runs on the Google Cloud Platform, letting you scale to hundreds of millions of users.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="14">
        <source xml:lang="en-US">Is really beginner-friendly, intuitive, and has complete and clear documentation.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="15">
        <source xml:lang="en-US">Prerequisites</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="16">
        <source xml:lang="en-US">This guide will use <bpt id="1">[</bpt>Python<ept id="1">]</ept><bpt id="2">(</bpt>https://www.python.org/<ept id="2">)</ept> and his <bpt id="3">[</bpt>Flask<ept id="3">]</ept><bpt id="4">(</bpt>http://flask.pocoo.org/<ept id="4">)</ept> lightweight library to let you build a complete and deployable chatbot application.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="17">
        <source xml:lang="en-US">So, if you don't know Python, make yourself a gift and <bpt id="1">[</bpt>learn it!<ept id="1">]</ept><bpt id="2">(</bpt>https://automatetheboringstuff.com/<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="18">
        <source xml:lang="en-US">Index</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="19">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Learning DialogFlow<ept id="1">]</ept><bpt id="2">(</bpt>#Learning-DialogFlow<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="20">
        <source xml:lang="en-US"><bpt id="1">[</bpt>The GUI approach<ept id="1">]</ept><bpt id="2">(</bpt>#The-GUI-approach<ept id="2">)</ept> </source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="21">
        <source xml:lang="en-US"><bpt id="1">[</bpt>A deeper approach<ept id="1">]</ept><bpt id="2">(</bpt>#A-deeper-approach<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="22">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Our first agent<ept id="1">]</ept><bpt id="2">(</bpt>#Our-first-agent<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="23">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Experimenting the API<ept id="1">]</ept><bpt id="2">(</bpt>#Experimenting-the-API<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="24">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Hands-on Project<ept id="1">]</ept><bpt id="2">(</bpt>#Hands-on-Project<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="25">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Up and running with Flask and webhooks<ept id="1">]</ept><bpt id="2">(</bpt>#Up-and-running-with-Flask-and-webhooks<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="26">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Our agent, but with API calls<ept id="1">]</ept><bpt id="2">(</bpt>#Our-agent,-but-with-API-calls<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="27">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Handling webhooks with Flask<ept id="1">]</ept><bpt id="2">(</bpt>#Handling-webhooks-with-Flask<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="28">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Deploying our chatbot<ept id="1">]</ept><bpt id="2">(</bpt>#Deploying-our-chatbot<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="29">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Chatbot tips and best practices<ept id="1">]</ept><bpt id="2">(</bpt>#Chatbot-tips-and-best-practices<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="30">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Project Ideas<ept id="1">]</ept><bpt id="2">(</bpt>#Project-Ideas<ept id="2">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="31">
        <source xml:lang="en-US">Learning DialogFlow</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="32">
        <source xml:lang="en-US">The thing I love about DialogFlow is that's beginner friendly.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="33">
        <source xml:lang="en-US">In fact, the approach  we'll follow to learn how to deploy real chat-bots is the following:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="34">
        <source xml:lang="en-US">A first gentle approach through the Graphical User Interface to understand the concepts (intents, entities, context...)</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="35">
        <source xml:lang="en-US">A more "coding" approach, using the Python Client for <bpt id="1">[</bpt>RESTful<ept id="1">]</ept><bpt id="2">(</bpt>https://it.wikipedia.org/wiki/Representational_State_Transfer<ept id="2">)</ept> API call to reproduce the same Agent but with code (and not clicks in the GUI).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="36">
        <source xml:lang="en-US">When we're able to build agents with Python API calls, we'll use them to create and End-to-End chatbot project that you'll deploy on several channels (Slack, Facebook, Telegram...)
Let's start!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="37">
        <source xml:lang="en-US">The GUI approach</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="38">
        <source xml:lang="en-US">The first thing I suggest you do is going through the <bpt id="1">[</bpt>official introduction<ept id="1">]</ept><bpt id="2">(</bpt>https://dialogflow.com/docs<ept id="2">)</ept> and step-by-step tutorial.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="39">
        <source xml:lang="en-US">It will bring you from zero to be able to create an Agent (the single chatbot application) with the GUI.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="40">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Here<ept id="1">]</ept><bpt id="2">(</bpt>https://console.dialogflow.com/api-client/#/login<ept id="2">)</ept> you can start to build your agent and follow the steps of the tutorial.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="41">
        <source xml:lang="en-US">
You won't have a problem during this phase, you don't have to code anything, just follow the tutorial up to "Fulfillment".</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="42">
        <source xml:lang="en-US">Our first agent</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="43">
        <source xml:lang="en-US">If you've followed the guide with attention, you're now able to create a simple chatbot from the GUI.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="44">
        <source xml:lang="en-US">So let's get our hands dirty and create our first agent!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="45">
        <source xml:lang="en-US">Create a new Agent and develop it from the GUI, until he's able to reproduce this "I'm lost" Intent with FollowUpIntents:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="46">
        <source xml:lang="en-US">Bot: Hi!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="47">
        <source xml:lang="en-US">I'm Virgilio!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="48">
        <source xml:lang="en-US">How can I help you?\
Human: Tell me which is the best <bpt id="1">_</bpt>Data Science<ept id="1">_</ept> project in <bpt id="2">_</bpt>Italy<ept id="2">_</ept>.\
B: Without a doubt, the best project about <bpt id="3">_</bpt>Data Science<ept id="3">_</ept> in <bpt id="4">_</bpt>Italy<ept id="4">_</ept> is <bpt id="5">_</bpt>Virgilio<ept id="5">_</ept>!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="49">
        <source xml:lang="en-US">Do you want to reach it?\
H: Yes.\
B: Here's the link, you're welcome :) \
B: <bpt id="1">[</bpt> ...drops the link <ept id="1">]</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="50">
        <source xml:lang="en-US">That's it, for now.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="51">
        <source xml:lang="en-US">Try to reproduce the conversation, you can try your agent from the top-right bar in the GUI.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="52">
        <source xml:lang="en-US">Notice that you have three entities here.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="53">
        <source xml:lang="en-US">Which ones?</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="54">
        <source xml:lang="en-US">Remember that you can use both system entities (like an hour, date, languages, places...), and custom entities!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="55">
        <source xml:lang="en-US">When you're done, let's go for the next step!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="56">
        <source xml:lang="en-US">Experimenting the API</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="57">
        <source xml:lang="en-US">Now that you're really comfortable with the DialogFlow concepts, we can dive deep down the rabbit hole and et up the environment for developing a chatbot with Python.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="58">
        <source xml:lang="en-US">This will bring us al the power of the code to build and handle a lot of chatbots (and many more things).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="59">
        <source xml:lang="en-US">Assuming that you have Python3 installed, install the <bpt id="1">[</bpt>Python SDK<ept id="1">]</ept><bpt id="2">(</bpt>https://dialogflow-python-client-v2.readthedocs.io/en/latest/index.html<ept id="2">)</ept> going in the folder where you want to put your configuration files, launch a shell and digit:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="60">
        <source xml:lang="en-US">If it doesn't work, maybe is because you have an old installation of Python 2.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="61">
        <source xml:lang="en-US">In that case, digit:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="62">
        <source xml:lang="en-US">Now go <bpt id="1">[</bpt>here<ept id="1">]</ept><bpt id="2">(</bpt>https://github.com/googleapis/dialogflow-python-client-v2/tree/master/samples<ept id="2">)</ept> and be happy.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="63">
        <source xml:lang="en-US">A lot of work is already done in these examples, and with them, you can already do a lot of things.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="64">
        <source xml:lang="en-US">I create the folder "examples" where I put those python files.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="65">
        <source xml:lang="en-US">Now follow the "Before you begin" instructions <bpt id="1">[</bpt>here<ept id="1">]</ept><bpt id="2">(</bpt>https://dialogflow-python-client-v2.readthedocs.io/en/latest/<ept id="2">)</ept>.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="66">
        <source xml:lang="en-US">Create a new agent in the project and add an intent from the GUI.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="67">
        <source xml:lang="en-US">Connect to that agent initializing the dialogflow client from your python script and read the Intents already existent in the Agent.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="68">
        <source xml:lang="en-US">It will be like:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="69">
        <source xml:lang="en-US">It should return you a JSON with all the information requested (in this case, your existing intents).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="70">
        <source xml:lang="en-US">JSON is the new de-facto standard for information representation, so <bpt id="1">[</bpt>get comfortable<ept id="1">]</ept><bpt id="2">(</bpt>https://www.w3schools.com/whatis/whatis_json.asp<ept id="2">)</ept> with it!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="71">
        <source xml:lang="en-US">So, you have these files with a wrapper for the low-level functions (in this case, the low-level function in the intent_management.py is called at line 40 inside the list_intent() function).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="72">
        <source xml:lang="en-US">These files are really useful to get started, but in the end, you want to have the most possible expressiveness and flexibility.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="73">
        <source xml:lang="en-US">So you want to master the lower level functions.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="74">
        <source xml:lang="en-US">A deeper approach</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="75">
        <source xml:lang="en-US">Try now to re-produce the Intent we have created with the lower level functions of the dialogflow module.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="76">
        <source xml:lang="en-US">You have here all the pieces of information you need, the <bpt id="1">[</bpt>documentation<ept id="1">]</ept><bpt id="2">(</bpt>https://cloud.google.com/dialogflow-enterprise/docs/reference/rest/v2-overview<ept id="2">)</ept> is really well done!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="77">
        <source xml:lang="en-US">In general, each time you want to communicate with the API you need to build a JSON (your request) and you'll receive a JSON (the response).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="78">
        <source xml:lang="en-US">Up and running with Flask and webhooks</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="79">
        <source xml:lang="en-US">Dialogflow's APIs allows you to take action on your own systems based on conversational input, embed your conversational interface into your app or website, and dynamically change your agent's behavior.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="80">
        <source xml:lang="en-US">Dialogflow APIs center around three primary use cases:</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="81">
        <source xml:lang="en-US">Fulfillment: take action on your own systems based on conversational input.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="82">
        <source xml:lang="en-US">You can do things like querying a database or API to provide info to your users with any integration (Actions on Google, Slack, etc.)</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="83">
        <source xml:lang="en-US">Detect Intent API: Embed your conversational interface built with Dialogflow into your app, website or device.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="84">
        <source xml:lang="en-US">Call this API with a user's query to get back how your DIalogflow agent's response</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="85">
        <source xml:lang="en-US">Agent API: Dynamically change your agent's behavior by editing your agent's intents, entities, and contexts.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="86">
        <source xml:lang="en-US">Do anything you can through Dialogflow console programmatically with Dialogflow's agent APIs.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="87">
        <source xml:lang="en-US">Here you can see a clear schema.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="88">
        <source xml:lang="en-US"><bpt id="1">![</bpt>Figure 1-1<ept id="1">]</ept><bpt id="2">(</bpt>https://raw.githubusercontent.com/dialogflow/resources/master/images/overview.png "1"<ept id="2">)</ept> </source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="89">
        <source xml:lang="en-US">Basically, you want to have a .py file that builds the agent (with API calls), then your agent is ready to take in queries form the user and send them (once recognized the user query) to a backend application (your webhook).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="90">
        <source xml:lang="en-US">In our case, the app in the backend (the webhook) is built with Flask.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="91">
        <source xml:lang="en-US"><bpt id="1">**</bpt>Fulfillment<ept id="1">**</ept> is code that's deployed as a webhook that lets your Dialogflow agent call business logic on an intent-by-intent basis.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="92">
        <source xml:lang="en-US">During a conversation, fulfillment allows you to use the information extracted by Dialogflow's natural language processing to generate dynamic responses or trigger actions on your back-end.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="93">
        <source xml:lang="en-US">Most Dialogflow agents make use of fulfillment to do things like: generate dynamic responses based on information looked up from a database, place orders based on products a customer has asked for, implement the rules and winning conditions for a game.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="94">
        <source xml:lang="en-US">Our agent, but with API calls</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="95">
        <source xml:lang="en-US">It's time to get our hands dirty again!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="96">
        <source xml:lang="en-US">This time we're adding the backend application acting under the hood, and not the static answers anymore.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="97">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Here<ept id="1">]</ept><bpt id="2">(</bpt>https://www.pragnakalp.com/dialogflow-fulfillment-webhook-tutorial/<ept id="2">)</ept> you have a consistent and complete tutorial on how to run the Flask application on your machine (using Ngrok to expose he webhook on your machine, to the Web).</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="98">
        <source xml:lang="en-US">
Now that you have the entire stack working, you can start creating any type of application!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="99">
        <source xml:lang="en-US">Deploying our chatbot</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="100">
        <source xml:lang="en-US">The smartest way to deploy your agent is through common communication channels like Facebook Messenger or Telegram.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="101">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Here<ept id="1">]</ept><bpt id="2">(</bpt>https://hub.packtpub.com/creating-and-deploying-a-chatbot-using-dialogflow-tutorial/<ept id="2">)</ept> you find a very comprehensive tutorial on how to deploy your chatbot application to the real worlds.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="102">
        <source xml:lang="en-US">It's easy, isn't it?</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="103">
        <source xml:lang="en-US">Chatbot tips and best practices</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="104">
        <source xml:lang="en-US">I've collected here for you some best articles and StackOverflow questions containing best practices.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="105">
        <source xml:lang="en-US"><bpt id="1">[</bpt>1<ept id="1">]</ept><bpt id="2">(</bpt>https://dzone.com/articles/best-practices-for-lively-chatbots<ept id="2">)</ept>, <bpt id="3">[</bpt>2<ept id="3">]</ept><bpt id="4">(</bpt>https://miningbusinessdata.com/automatically-generate-dialogflow-faq-chatbot-csv-file/<ept id="4">)</ept>, <bpt id="5">[</bpt>3<ept id="5">]</ept><bpt id="6">(</bpt>https://www.comm100.com/blog/chatbot-best-worst-practices.html<ept id="6">)</ept>, <bpt id="7">[</bpt>4<ept id="7">]</ept><bpt id="8">(</bpt>https://chatbotsmagazine.com/11-more-best-ux-practices-for-building-chatbots-67362d1104d9<ept id="8">)</ept>, <bpt id="9">[</bpt>5<ept id="9">]</ept><bpt id="10">(</bpt>https://thebrainfiles.wearebrain.com/chatbot-best-practice-learnings-and-insights-from-companies-like-abn-amro-booking-com-6e4c329c60a5<ept id="10">)</ept>, <bpt id="11">[</bpt>6<ept id="11">]</ept><bpt id="12">(</bpt>https://www.marutitech.com/8-best-practices-bot-development/<ept id="12">)</ept>, <bpt id="13">[</bpt>7<ept id="13">]</ept><bpt id="14">(</bpt>https://stackoverflow.com/questions/52426295/dialogflow-intent-lifespan-best-practice-and-performance<ept id="14">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="106">
        <source xml:lang="en-US"><bpt id="1">[</bpt>Here<ept id="1">]</ept><bpt id="2">(</bpt>https://medium.com/the-mission/how-to-effectively-run-a-chatbot-development-project-a445d2d1170f<ept id="2">)</ept> and <bpt id="3">[</bpt>here<ept id="3">]</ept><bpt id="4">(</bpt>https://botpress.io/blog/successful-chatbot-projects-avoid-these-mistakes/<ept id="4">)</ept> you find two guides on how to plan a chat for your business.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="107">
        <source xml:lang="en-US">Project Ideas</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="108">
        <source xml:lang="en-US">I've packed here for you a list of links with a lot of project ideas.</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="109">
        <source xml:lang="en-US">Have fun!</source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="110">
        <source xml:lang="en-US"><bpt id="1">[</bpt>1<ept id="1">]</ept><bpt id="2">(</bpt>https://chatbotsmagazine.com/80-chatbot-ideas-for-enterprise-bots-4bb73281f593<ept id="2">)</ept>, <bpt id="3">[</bpt>2<ept id="3">]</ept><bpt id="4">(</bpt>https://www.messengerpeople.com/best-of-8-chatbot-projects-you-will-love-to-discover/<ept id="4">)</ept>, <bpt id="5">[</bpt>3<ept id="5">]</ept><bpt id="6">(</bpt>https://www.quora.com/What-are-some-cool-ideas-where-chat-bots-can-be-put-to-use<ept id="6">)</ept>, <bpt id="7">[</bpt>4<ept id="7">]</ept><bpt id="8">(</bpt>https://www.wordstream.com/blog/ws/2017/10/04/chatbots<ept id="8">)</ept>, <bpt id="9">[</bpt>5<ept id="9">]</ept><bpt id="10">(</bpt>https://www.ideas2it.com/blogs/50-chatbot-use-cases/<ept id="10">)</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
      <trans-unit id="111">
        <source xml:lang="en-US">Written by <bpt id="1">_</bpt>clone95<ept id="1">_</ept></source>
        <target xml:lang="zh-Hans"></target>
      </trans-unit>
    </body>
 </file>
</xliff>